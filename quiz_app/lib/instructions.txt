import 'package:flutter/material.dart';
import 'package:quiz_app/constants.dart';
import 'package:quiz_app/widgets/option_card.dart';

import '../models/questions_model.dart';
import '../widgets/question_widget.dart';
import '../widgets/next_button.dart';
import '../widgets/result_box.dart';

//create homescreen widget
class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final List<Question> _questions = [
    Question(
        id: '10',
        options: {
          '5': false,
          '6': false,
          '4': true,
          '2': false,
        },
        title: 'What is 2 + 2 ?'),
    Question(
        id: '11',
        options: {
          '5': true,
          '6': false,
          '4': false,
          '2': false,
        },
        title: 'What is 2 + 3 ?'),
  ];

  //create an index to loop through _questions
  int index = 0;

  //create a score variable
  int score = 0;

  //create  a boolean to check user answer is correct or not
  bool isPressed = false;

  //create a function to display next question
  bool isAlreadySelected = false;

  void nextQuestion() {
    if (index == _questions.length - 1) {
      //this is the block where the question end.
      showDialog(
          context: context,
          barrierDismissible: false, //this will disable the dissmiss function on clicking outside of box
          builder: (ctx) => ResultBox(
                result: score, //total point user got
                questionLength: _questions.length, //out of how many questions
              ));
    } else {
      if (isPressed) {
        setState(() {
          index++; //when the index will change to 1. rebuild the app.
          isPressed = false;
          isAlreadySelected = false;
        });
      } else {
        ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
          content: Text("please select one option"),
          behavior: SnackBarBehavior.floating,
          margin: EdgeInsets.symmetric(vertical: 20.0),
        ));
      }
    }
  }

  //create a function of changing the color
  void checkAnswerAndUpdate(bool value) {
    if (isAlreadySelected) {
      return;
    } else {
      if (value == true) {
        score++;
        setState(() {
          isPressed = true;
          isAlreadySelected = true;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      //change the background
      backgroundColor: background,
      appBar: AppBar(
        title: const Text('Quiz App'),
        backgroundColor: background,
        shadowColor: Colors.transparent,
        actions: [
          Padding(
            padding: EdgeInsets.all(10.0),
            child: Text(
              'Score: $score',
              style: const TextStyle(fontSize: 18.0),
            ),
          ),
        ],
      ),
      body: Container(
        width: double.infinity,
        padding: const EdgeInsets.symmetric(horizontal: 10.0),
        child: Column(
          children: [
            //add the question widget
            QuestionWidget(
                question: _questions[index].title,
                //means a first question in a list
                indexAction: index,
                //currently at 0
                totalQuestions: _questions.length //total length of the list
                ),
            const Divider(color: neutral),
            //add some space
            const SizedBox(
              height: 25.0,
            ),
            for (int i = 0; i < _questions[index].options.length; i++)
              GestureDetector(
                onTap: () => checkAnswerAndUpdate(
                    _questions[index].options.values.toList()[i]),
                child: OptionCard(
                  option: _questions[index].options.keys.toList()[i],
                  color: isPressed
                      ? _questions[index].options.values.toList()[i] == true
                          ? correct
                          : incorrect
                      : neutral,
                ),
              )
          ],
        ),
      ),

      //use the floating action button
      floatingActionButton: Padding(
        padding: EdgeInsets.symmetric(horizontal: 10.0),
        child: NextButton(
          nextQuestion: nextQuestion,
        ),
      ),
      floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
    );
  }
}
